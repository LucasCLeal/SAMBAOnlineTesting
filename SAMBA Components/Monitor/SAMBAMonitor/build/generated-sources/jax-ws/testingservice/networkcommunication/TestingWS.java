
package testingservice.networkcommunication;

import java.util.List;
import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.4-b01-
 * Generated source version: 2.1
 * 
 */
@WebService(name = "TestingWS", targetNamespace = "http://networkCommunication.testingService/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface TestingWS {


    /**
     * 
     */
    @WebMethod
    @Oneway
    @RequestWrapper(localName = "stop", targetNamespace = "http://networkCommunication.testingService/", className = "testingservice.networkcommunication.Stop")
    public void stop();

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "startTestingService", targetNamespace = "http://networkCommunication.testingService/", className = "testingservice.networkcommunication.StartTestingService")
    @ResponseWrapper(localName = "startTestingServiceResponse", targetNamespace = "http://networkCommunication.testingService/", className = "testingservice.networkcommunication.StartTestingServiceResponse")
    public String startTestingService();

    /**
     * 
     * @param machineIP
     * @param numberOfFile
     * @param nameBpelServer
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "sendUpdateNumberOfBpelFiles", targetNamespace = "http://networkCommunication.testingService/", className = "testingservice.networkcommunication.SendUpdateNumberOfBpelFiles")
    @ResponseWrapper(localName = "sendUpdateNumberOfBpelFilesResponse", targetNamespace = "http://networkCommunication.testingService/", className = "testingservice.networkcommunication.SendUpdateNumberOfBpelFilesResponse")
    public boolean sendUpdateNumberOfBpelFiles(
        @WebParam(name = "machineIP", targetNamespace = "")
        String machineIP,
        @WebParam(name = "nameBpelServer", targetNamespace = "")
        String nameBpelServer,
        @WebParam(name = "numberOfFile", targetNamespace = "")
        int numberOfFile);

    /**
     * 
     * @param bpelFile
     * @param machineIP
     * @param nameBpelServer
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "sendUpdateBpelFiles", targetNamespace = "http://networkCommunication.testingService/", className = "testingservice.networkcommunication.SendUpdateBpelFiles")
    @ResponseWrapper(localName = "sendUpdateBpelFilesResponse", targetNamespace = "http://networkCommunication.testingService/", className = "testingservice.networkcommunication.SendUpdateBpelFilesResponse")
    public boolean sendUpdateBpelFiles(
        @WebParam(name = "machineIP", targetNamespace = "")
        String machineIP,
        @WebParam(name = "nameBpelServer", targetNamespace = "")
        String nameBpelServer,
        @WebParam(name = "bpelFile", targetNamespace = "")
        String bpelFile);

    /**
     * 
     * @param listaServizi
     * @param contrService
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "controlServiceHasChanged", targetNamespace = "http://networkCommunication.testingService/", className = "testingservice.networkcommunication.ControlServiceHasChanged")
    @ResponseWrapper(localName = "controlServiceHasChangedResponse", targetNamespace = "http://networkCommunication.testingService/", className = "testingservice.networkcommunication.ControlServiceHasChangedResponse")
    public boolean controlServiceHasChanged(
        @WebParam(name = "contrService", targetNamespace = "")
        String contrService,
        @WebParam(name = "listaServizi", targetNamespace = "")
        String listaServizi);

    /**
     * 
     * @param operation
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "exeServiceOperation", targetNamespace = "http://networkCommunication.testingService/", className = "testingservice.networkcommunication.ExeServiceOperation")
    @ResponseWrapper(localName = "exeServiceOperationResponse", targetNamespace = "http://networkCommunication.testingService/", className = "testingservice.networkcommunication.ExeServiceOperationResponse")
    public boolean exeServiceOperation(
        @WebParam(name = "operation", targetNamespace = "")
        String operation);

    /**
     * 
     * @param bpelName
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDependenciesPathForBPELName", targetNamespace = "http://networkCommunication.testingService/", className = "testingservice.networkcommunication.GetDependenciesPathForBPELName")
    @ResponseWrapper(localName = "getDependenciesPathForBPELNameResponse", targetNamespace = "http://networkCommunication.testingService/", className = "testingservice.networkcommunication.GetDependenciesPathForBPELNameResponse")
    public List<String> getDependenciesPathForBPELName(
        @WebParam(name = "bpelName", targetNamespace = "")
        String bpelName);

    /**
     * 
     * @param filePath
     * @return
     *     returns byte[]
     * @throws FileNotFoundException_Exception
     * @throws IOException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "fetchDataFromFilePath", targetNamespace = "http://networkCommunication.testingService/", className = "testingservice.networkcommunication.FetchDataFromFilePath")
    @ResponseWrapper(localName = "fetchDataFromFilePathResponse", targetNamespace = "http://networkCommunication.testingService/", className = "testingservice.networkcommunication.FetchDataFromFilePathResponse")
    public byte[] fetchDataFromFilePath(
        @WebParam(name = "filePath", targetNamespace = "")
        String filePath)
        throws FileNotFoundException_Exception, IOException_Exception
    ;

    /**
     * 
     * @param bpelName
     */
    @WebMethod
    @RequestWrapper(localName = "startOnlineModelBasedTestforBpel", targetNamespace = "http://networkCommunication.testingService/", className = "testingservice.networkcommunication.StartOnlineModelBasedTestforBpel")
    @ResponseWrapper(localName = "startOnlineModelBasedTestforBpelResponse", targetNamespace = "http://networkCommunication.testingService/", className = "testingservice.networkcommunication.StartOnlineModelBasedTestforBpelResponse")
    public void startOnlineModelBasedTestforBpel(
        @WebParam(name = "bpelName", targetNamespace = "")
        String bpelName);

}
